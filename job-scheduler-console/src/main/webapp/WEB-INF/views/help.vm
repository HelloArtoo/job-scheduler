<h1 class="page-header">使用说明</h1>
<p> 
  	控制台只能控制作业本身是否运行，但不能控制作业进程的启停，因为控制台和作业本身服务器是完全分布式的，控制台并不能控制作业服务器。
</p>
<h2>基本原理</h2>
    <img src="/resources/img/segment.png" class="img-responsive" alt="如何对大作业进行段落化展开">
<h2>两种加载方式 Java & Spring</h2>
<h3>Java方式</h3>
<p>
	<pre class="pre-scrollable">
public class JobBootstrap {

    // private static final int ZK_PORT = 2181;
    // private static final String ZK_CONNECTION = "localhost:" + ZK_PORT;
    private static final String ZK_SERVERLIST = "192.168.104.242:2181,192.168.104.244:2181,192.168.104.246:2181";
    private static final String ZK_NAMESPACE = "pbs-union-test";
    private static final String RDB_DRIVER = "org.h2.Driver";
    private static final String RDB_URL = "jdbc:h2:mem:job_event_storage";
    private static final String RDB_USERNAME = "sa";
    private static final String RDB_PASSWORD = "";

    public static void main(String[] args) {

        CoordinatorRegistryCenter registry = createRegistryCenter();
        registry.init();

        JobEventConfiguration jobEventConfig = new RdbJobEventConfiguration(createEventDataSource());

        new JobScheduler(registry, createProductSyncSimpleConfiguration(), jobEventConfig, new SyncListener(),
            new SyncOneOffListener(1000L, 2000L)).init();
        // new JobScheduler(registry, createProduct2DcFlowConfiguration(),
        // jobEventConfig).init();
    }

    private static CoordinatorRegistryCenter createRegistryCenter() {

        return new ZookeeperRegistryCenter(new ZookeeperConfiguration(ZK_SERVERLIST, ZK_NAMESPACE));
    }

    private static DataSource createEventDataSource() {

        BasicDataSource result = new BasicDataSource();
        result.setDriverClassName(RDB_DRIVER);
        result.setUrl(RDB_URL);
        result.setUsername(RDB_USERNAME);
        result.setPassword(RDB_PASSWORD);
        return result;
    }
}
	</pre>
</p>
<h3>Spring方式(推荐)</h3>
<p>
	<pre class="pre-scrollable">
public class SpringBootstrap {

    @SuppressWarnings({ "unused", "resource" })
	public static void main(String[] args) {

		ApplicationContext ctx = new ClassPathXmlApplicationContext("classpath:spring-jobs-simple-test.xml");
        
    }
}
	</pre>
</p>
<a href="/resources/files/demo.7z" class="btn btn-primary btn-lg" role="button">下载简单Demo</a>

<h2>如何对作业分段？</h2> 
<ol>
    <li>根据ID分段</li>
    <li>根据哈希code分段</li>
</ol>

<div class="alert alert-success">
   	整理思路是可以根据数字型字段进行取模操作，或者分页。(自由拓展，发挥想象)
</div>

<h2>控制台功能</h2> 
<ol>
    <li>作业状态查看</li>
    <li>作业配置、执行情况、分段项状态查看</li>
    <li>快捷的修改作业设置</li>
    <li>控制作业节点暂停和恢复运行</li>
    <li>作业服务器状态查看</li>
</ol>
<h2>亟待实现</h2>
<ol>
    <li>任务依赖<br />添加基于任务树依赖结构</li>
    <li>多样化触发方式<br />添加包括但不仅限于MQ的多种触发方式</li>
</ol>
<h2>不支持项</h2>
<ol>
    <li>添加作业。因为作业都是在首次运行时自动添加，使用控制台添加作业并无必要。</li>
    <li>删除作业。即使删除了Zookeeper信息也不能真正停止作业的运行，还会导致运行中的作业出问题。</li>
</ol>
<h2>操作问题</h2>
<ol>
    <li>Q：如何添加作业？<br />A：直接在作业服务器启动包含Job-Scheduler作业进程，由于触发基于Quartz，当看到Quartz启动信息则代表启动成功。</li>
    <li>Q：如何删除作业？<br />A：关闭所有要删除的作业的运行进程，之后登录Zookeeper手工删除作业名称节点。(作业管理移除)</li>
    <li>Q：什么是streaming作业？<br />A：FLOW类型作业的一个属性，开启流式处理，则任务执行完毕后，如果fetchData依然不为空，则继续执行作业。如果非流式处理数据, 则处理数据完成后作业结束</li>
    <li>Q：什么式作业监控(monitor)？<br />A：针对作业运行开启监控，可配合失效转移使用。如果每次作业执行时间和间隔时间均非常短的情况，建议不监控作业运行时状态以提升效率，因为是瞬时状态，所以无必要监控。</li>
    <li>Q：如何实现HA？<br />A：当某一个任务实例节点宕机（离开与zookeeper的连接），会触发主节点的重新分段逻辑。</li>
    <li>Q：如何重新分段？<br />A：分段操作只会在主节点运行的时候才会执行，当某一任务节点挂掉，或者手工设置了需要重新分段的标记，也只会在作业下次执行的执行进行重新分段。</li>
    <li>Q：什么式失效转移(failover)？<br />A：所谓失效转移，就是在执行任务的过程中遇见异常的情况，这个分段任务可以在其他节点再次执行。这个和上面的HA不同，对于HA，上面如果任务终止，那么不会在其他任务实例上再次重新执行。(只有开启监控作业执行时状态的情况下才可以开启失效转移)</li>
    <li>Q：什么是misfire？<br />A：开启后，错过的任务在作业所有分段执行结束后，执行错过项。</li>
</ol>